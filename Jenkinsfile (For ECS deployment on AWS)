pipeline {
    
	agent any
	
	tools {
        maven "mvn"
    }
	

        environment {

  registryCredential = 'ecr:us-east-2:<aws credentials in jenkins server>'
  appRegistry = "<Endpoint of ECR Registry/app image name>"
	dbRegistry = "<Endpoint of ECR Registry/db image name>"
  mcRegistry = "<Endpoint of ECR Registry/memcached image name>"
  rmqRegistry = "<Endpoint of ECR Registry/rabbitmq image name>"
  vprofileRegistry = "<URL OF ECR>"
  cluster = "<ECS ClusterName in AWS>"
  serviceapp = "vprofileappsvc"
	servicedb = "vprodb"
	memcachedsvc = "vprocache01"
	rabbitmqsvc = "vpromq01"
   dockerImage1 = ''
   dockerImage2 = ''
   dockerImage3 = ''
   dockerImage4 = ''



    }

	
    stages{
        
 
        
        
        stage('BUILD'){
            steps {
                sh 'mvn clean install -DskipTests'
            }
            post {
                success {
                    echo 'Now Archiving...'
                    archiveArtifacts artifacts: '**/target/*.war'
                }
            }
        }

	stage('UNIT TEST'){
            steps {
                sh 'mvn test'
            }
        }

	stage('INTEGRATION TEST'){
            steps {
                sh 'mvn verify -DskipUnitTests'
            }
        }
		
        stage ('CODE ANALYSIS WITH CHECKSTYLE'){
            steps {
                sh 'mvn checkstyle:checkstyle'
            }
            post {
                success {
                    echo 'Generated Analysis Result'
                }
            }
        }

        stage('CODE ANALYSIS with SONARQUBE') {
          
		  environment {
             scannerHome = tool 'sonar4.7'
          }

          steps {
            withSonarQubeEnv('sonar') {
               sh '''${scannerHome}/bin/sonar-scanner -Dsonar.projectKey=vprofile \
                   -Dsonar.projectName=vprofile-repo \
                   -Dsonar.projectVersion=1.0 \
                   -Dsonar.sources=src/ \
                   -Dsonar.java.binaries=target/test-classes/com/visualpathit/account/controllerTest/ \
                   -Dsonar.junit.reportsPath=target/surefire-reports/ \
                   -Dsonar.jacoco.reportsPath=target/jacoco.exec \
                   -Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml'''
            }
          }
        }
            stage('QualityGate'){
            steps {
            
               timeout(time: 5, unit: 'MINUTES') {
               waitForQualityGate abortPipeline: true
}
}
}
    stage('Build App Images') {
       steps {
       
         script {
                dockerImage1 = docker.build( appRegistry + ":$BUILD_NUMBER", ".")
                dockerImage2 = docker.build( dbRegistry + ":$BUILD_NUMBER", "./db-dockerfile/" )
                dockerImage3 = docker.build( mcRegistry + ":$BUILD_NUMBER", "./mc-dockerfile/" )
                dockerImage4 = docker.build( rmqRegistry + ":$BUILD_NUMBER", "./rmq-dockerfile/")
             }

     }
    
    }

    stage('Upload App Images') {
          steps{
            script {
              docker.withRegistry( vprofileRegistry, registryCredential ) {
                dockerImage1.push("$BUILD_NUMBER")
                dockerImage1.push('latest')
                dockerImage2.push("$BUILD_NUMBER")
                dockerImage2.push('latest')
                dockerImage3.push("$BUILD_NUMBER")
                dockerImage3.push('latest')
                dockerImage4.push("$BUILD_NUMBER")
                dockerImage4.push('latest')
   
              }
            }
          }
     }

    stage('Remove Unused docker images') {
          steps{
          // Clean up local Docker images
            dockerImage1.remove()
            dockerImage2.remove()
            dockerImage3.remove()
            dockerImage4.remove()

          }
        }
     
     stage('Deploy to ecs') {
          steps {
        withAWS(credentials: '<aws credentials in jenkins server>', region: 'us-east-2') {
          sh 'aws ecs update-service --cluster ${cluster} --service ${serviceapp} --force-new-deployment'
          sh 'aws ecs update-service --cluster ${cluster} --service ${servicedb} --force-new-deployment'
          sh 'aws ecs update-service --cluster ${cluster} --service ${memcachedsvc} --force-new-deployment'
          sh 'aws ecs update-service --cluster ${cluster} --service ${rabbitmqsvc} --force-new-deployment'


        }
      }
     }

  }

    }
}
